// Heroball Protobuf
syntax = "proto3";
import "google/api/annotations.proto";

package pb;

message Player {
  int32 PlayerId = 1;
  string Name = 2;
  string Position = 3;
}

message League {
  int32 LeagueId = 1;
  string Name = 2;
  string Division = 3;
}

message Competition {
  League League = 1;
  int32 CompetitionId = 2;
  string Name = 3;
}

message Team {
  int32 TeamId = 1;
  string Name = 2;
}

message CompetitionTeam {
  Team Team = 1;
  int32 Won = 2;
  int32 Drawn = 3;
  int32 Lost = 4;
}

message Location {
  int32 LocationId = 1;
  string Name = 2;
}

message Stats {
  int32 TwoPointFGM = 1;
  int32 TwoPointFGA = 2;
  int32 ThreePointFGM = 3;
  int32 ThreePointFGA = 4;
  int32 FreeThrowsMade = 5;
  int32 FreeThrowsAttempted = 6;
  int32 OffensiveRebounds = 7;
  int32 DefensiveRebounds = 8;
  int32 Assists = 9;
  int32 Turnovers = 10;
  int32 Steals = 11;
  int32 Blocks = 12;
  int32 RegularFoulsForced = 13;
  int32 RegularFoulsCommitted = 14;
  int32 TechnicalFoulsCommitted = 15;
  int32 MinutesPlayed = 16;
}

message PlayerProfile {
  string Name = 1;
  int32 YearStarted = 2;
  string Position = 3;
  string Description = 4;
}

message PlayerGameStats {
  int32 StatsId = 1;
  int32 GameId = 2;
  Team Team = 3;
  Player Player = 4;
  Stats Stats = 5;
}

message PlayerAggregateStats {
  Team Team = 1;
  Player Player = 2;
  int32 Count = 3;
  Stats TotalStats = 4;
}

message PlayerTeam {
  Competition Competition = 1;
  Team Team = 2;
  PlayerAggregateStats Stats = 3;
  repeated int32 JerseyNumbers = 4;
}

message Game {
  int32 GameId = 1;
  Team HomeTeam = 2;
  Team AwayTeam = 3;
  Location Location = 4;
  Competition Competition = 5;
  GameResult Result = 6;
  string GameTime = 7;
}

message GameResult {
  int32 HomeTeamId = 1;
  int32 HomeTeamPoints = 2;
  int32 AwayTeamId = 3;
  int32 AwayTeamPoints = 4;
}

message PlayerInfo {
  int32 PlayerId = 1;
  PlayerProfile Profile = 2;
  repeated PlayerTeam Teams = 3;
  PlayerAggregateStats StatsAllTime = 4;
  GamesCursor RecentGames = 5;
  repeated PlayerGameStats RecentStats = 7;
}

message TeamInfo {
  Team Team = 1;
  Competition Competition = 2;
  PlayersCursor Players = 3;
  BasicStatsLeaders StatsLeaders = 4;
  GamesCursor RecentGames = 5;
}

message GameInfo {
  Game Game = 1;
  repeated PlayerGameStats PlayerStats = 2;
}

message CompetitionInfo {
  Competition Competition = 1;
  GamesCursor RecentGames = 2;
  repeated Location Locations = 3;
  repeated CompetitionTeam Teams = 4;
  BasicStatsLeaders StatsLeaders = 5;
}

message BasicStatsLeaders {
  repeated PlayerAggregateStats Points = 1;
  repeated PlayerAggregateStats Rebounds = 2;
  repeated PlayerAggregateStats Assists = 3;
  repeated PlayerAggregateStats Steals = 4;
  repeated PlayerAggregateStats Blocks = 5;
  repeated PlayerAggregateStats Turnovers = 6;
}

message GetPlayerInfoRequest {
  int32 PlayerId = 1;
}

message GetGameInfoRequest {
  int32 GameId = 1;
}

message GetTeamInfoRequest {
  int32 TeamId = 1;
}

message GetCompetitionInfoRequest {
  int32 CompetitionId = 1;
}

message GetGamesRequest {
  int32 Offset = 1; /* where offset from results should start */
  int32 Count = 2; /* number requested */
  GamesFilter Filter = 3;
}

message GamesFilter {
  repeated int32 CompetitionIds = 3; /* optional filter */
  repeated int32 TeamIds = 4; /* optional filter */
  repeated int32 PlayerIds = 5; /* optional filter */
}

message GamesCursor {
  int32 NextOffset = 1; /* where we are up to */
  int32 Total = 2; /* the total available */
  repeated Game Games = 3; /* those in this cursor */
  GamesFilter Filter = 4;
}

message GetPlayersRequest {
  int32 Offset = 1;
  int32 Count = 2;
  PlayersFilter Filter = 3;
}

message PlayersFilter {
  repeated int32 CompetitionIds = 1; /* optional filter */
  repeated int32 TeamIds = 2; /* optional filter */
}

message PlayersCursor {
  int32 NextOffset = 1;
  int32 Total = 2;
  repeated Player Players = 3;
  PlayersFilter Filter = 4;
}

service HeroBallService {

  rpc GetGames(GetGamesRequest) returns (GamesCursor)  {
      option (google.api.http) = {
        post: "/v1/get/games"
        body: "*"
    };
  }

  rpc GetPlayers(GetPlayersRequest) returns (PlayersCursor) {
      option (google.api.http) = {
        post: "/v1/get/players"
        body: "*"
    };    
  }

  rpc GetPlayerInfo(GetPlayerInfoRequest) returns (PlayerInfo)  {
      option (google.api.http) = {
        post: "/v1/get/player/info"
        body: "*"
    };
  }

  rpc GetTeamInfo(GetTeamInfoRequest) returns (TeamInfo)  {
      option (google.api.http) = {
        post: "/v1/get/team/info"
        body: "*"
    };
  }

  rpc GetGameInfo(GetGameInfoRequest) returns (GameInfo)  {
      option (google.api.http) = {
        post: "/v1/get/game/info"
        body: "*"
    };
  }

  rpc GetCompetitionInfo(GetCompetitionInfoRequest) returns (CompetitionInfo)  {
      option (google.api.http) = {
        post: "/v1/get/competition/info"
        body: "*"
    };
  }

}
